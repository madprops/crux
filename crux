#!/usr/bin/env ruby

# This trims all unecessary trailing white space of all files in a directory
# It works recursively starting from the path sent as the argument
# It will only work on common text files like js, these will be hardcoded

# Do the trim operation and save the file
def clean_file(path)
  s = File.read(path)
  cleaned = s.gsub(/ +$/, "")
  File.write(path, cleaned)
end

def main()
  # Ignore files from these places
  filters = ["/node_modules/"]

  # Only work on these extensions
  exts = [".js", ".css", ".html", ".nim", ".rb", ".py", ".rs"]

  # Path argument with some cleanup
  if not ARGV[0]
    puts "A path argument is required."
    return
  end

  force = false

  if ARGV[1] == "-y"
    force = true
  end

  path_arg = ARGV[0].gsub(/\/+$/, "")

  # Get all paths starting from path_arg
  paths = Dir.glob(File.join(path_arg, "**", "*")).select { |e| File.file? e }

  # Hold valid paths here
  valid_paths = []

  paths.each do |path|
    if filters.any? { |x| path.include? x }
      next
    end

    if not exts.include?(File.extname(path))
      next
    end

    valid_paths.push(path)
  end

  # Ask for confirmation
  puts "Trim files inside " + path_arg + " (y/n)"
  puts "Number of files to be processed is " + valid_paths.length.to_s

  if not force
    ans = $stdin.gets.strip
  
    if ans != "y" and ans != "Y"
      puts "Doing nothing. Exiting."
      return
    end
  end

  # Do the actual operations
  valid_paths.each do |path|
    clean_file(path)
  end

  puts "Done."
end

# Trap ^C 
Signal.trap("INT") { 
  exit
}

# Start here
if __FILE__ == $0
  main()
end